//3.7
//         자바 프로그램 시작 -> 자바파일 생성(클래스)
//         코드가 많아지면 함수를 이용해서 쪼갠다. 변수가 많아지면 쪼갠다 -> 클래스
//         클래스에 비슷한 성격의 데이터와 함수를 묶는다.
//         main에서 불러서 사용 1.class를 직접 사용하는 방법(static) 2. class의 복사본인 객체를 생서해서 사용하는 방법 (non-static)
//         객체의 개성(나이, 이름, 거주지)을 표현할 때는 non-static 모든 객체가 동일하게 사용하는 공유 정보(인류 평균 나이)는 static
//         static이 붙은것은 static이 붙지 않은 것을 사용할 수 없다. 반대는 가능하다
//         프로그래밍 -> 중복과의 싸움
//         데이터의 중복 -> 변수
//         코드의 중복 -> 함수
//         변수/함수의 중복 -> 클래스, 객체
//         객체의 중복 -> 상속
// 자바의 기본 타입 형변환
// 자바의 대전제 -> 변수에는 오직 변수와 일치하는 타입의 값만 저장 가능
//        int a = 10; // 형변환 X
//        double b = 10; // 형변환 O => int가 double로 바뀜 -> 자바가 바꿔줌(자동형변환)
//
//        int c = (int)3.14; // 형변환 O  => double이 int로 바뀌려면 소수점 떼야됨 (수동형변환)
// 객체타입 형변환// 자바 상속 -> 상위 타입을 바탕으로 하위 타입 생성 -> 동물을 바탕으로 고양이 생성
// 상속관계에서 하위 타입은 상위타입으로 형변환 가능. 그 반대는 불가능
// 하위타입이 상위타입으로 모습을 바꾸는 건 괜찮아서 자동 형변환이 일어남

//3.8
//상속 -> 객체간 중복을 해결하고 -> 상속 관계 객체끼리 형변환 가능 -> 계층 구조를 표현할 수 있음
//상속 단점 -> 잘못된 상속은 다른 객체에 큰 영향을 미침 -> 코드가 복잡하고 커지면 중복을 해결 X
//상속의 단점을 보완 -> 구성(composition)
// -> 객체를 사용해서 또 다른 객체를 만듦(다른 객체에 요청)
// -> 구성시 다양한 객체를 구성할 수 있는데 객체가 많아지면 객체를 저장하기 위한 변수가 많이 필요.
// -> 비슷한 객체를 그룹화할 필요
//다양한 객체를 하나의 개념으로 보기 위해 형변환 활용
//개, 고양이, 기린,사자 등의 객체를 동물이라는 하나의 카테고리로 표현 가능
//필요에 따라 개를 개로보거나 동물로 보거나 할 수 있다.